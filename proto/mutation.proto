// Copyright (C) 2024-2025 Guyutongxue
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
option csharp_namespace = "GiTcg.Proto";

import "enums.proto";
import "state.proto";

message ExposedMutation {
  oneof mutation {
    ChangePhaseEM change_phase = 1;
    StepRoundEM step_round = 2;
    SwitchTurnEM switch_turn = 3;
    SetWinnerEM set_winner = 4;
    TransferCardEM transfer_card = 5;
    SwitchActiveEM switch_active = 6;
    RemoveCardEM remove_card = 7;
    CreateCardEM create_card = 8;
    CreateCharacterEM create_character = 9;
    CreateEntityEM create_entity = 10;
    RemoveEntityEM remove_entity = 11;
    ModifyEntityVarEM modify_entity_var = 12;
    TransformDefinitionEM transform_definition = 13;
    ResetDiceEM reset_dice = 14;
    DamageEM damage = 15;
    ElementalReactionEM elemental_reaction = 16;
    SkillUsedEM skill_used = 18;
    PlayerStatusChangeEM player_status_change = 19;
    SwapCharacterPositionEM swap_character_position = 20;
    SetPlayerFlagEM set_player_flag = 21;
  }
  reserved 17;
}

message ChangePhaseEM {
  PhaseType new_phase = 1;
}

message StepRoundEM { }

message SwitchTurnEM { }

message SetWinnerEM {
  optional int32 winner = 1;
}

enum CardArea {
  CARD_AREA_HAND = 0;
  CARD_AREA_PILE = 1;
}

message TransferCardEM {
  int32 who = 1;
  reserved 2, 3;
  CardArea from = 4;
  CardArea to = 5;
  bool transfer_to_opp = 6;
  optional int32 target_index = 7;
  CardState card = 8;
}

message SwitchActiveEM {
  int32 who = 1;
  sint32 character_id = 2;
  int32 character_definition_id = 3;
  optional int32 via_skill_definition_id = 4;
}

enum RemoveCardReason {
  REMOVE_CARD_REASON_UNSPECIFIED = 0;
  REMOVE_CARD_REASON_PLAY = 1;
  REMOVE_CARD_REASON_ELEMENTAL_TUNING = 2;
  REMOVE_CARD_REASON_HANDS_OVERFLOW = 3;
  REMOVE_CARD_REASON_DISPOSED = 4;
  REMOVE_CARD_REASON_PLAY_NO_EFFECT = 5;
  REMOVE_CARD_REASON_ON_DRAW_TRIGGERED = 6;
}

message RemoveCardEM {
  int32 who = 1;
  reserved 2, 3;
  CardArea from = 4;
  RemoveCardReason reason = 5;
  CardState card = 6;
}

message CreateCardEM {
  int32 who = 1;
  reserved 2, 3;
  CardArea to = 4;
  optional int32 target_index = 5;
  CardState card = 6;
}

message CreateCharacterEM {
  int32 who = 1;
  reserved 2, 3;
  CharacterState character = 4;
}

enum EntityArea {
  ENTITY_AREA_UNSPECIFIED = 0;
  ENTITY_AREA_CHARACTER = 1;
  ENTITY_AREA_COMBAT_STATUS = 2;
  ENTITY_AREA_SUMMON = 3;
  ENTITY_AREA_SUPPORT = 4;
}

message CreateEntityEM {
  int32 who = 1;
  reserved 2, 3;
  EntityArea where = 4;
  EntityState entity = 5;
}

message RemoveEntityEM {
  reserved 2, 3;
  EntityState entity = 4;
}

enum ModifyDirection {
  MODIFY_DIRECTION_UNSPECIFIED = 0;
  MODIFY_DIRECTION_INCREASE = 1;
  MODIFY_DIRECTION_DECREASE = 2;
}

message ModifyEntityVarEM {
  sint32 entity_id = 2;
  int32 entity_definition_id = 3;
  string variable_name = 4;
  int32 variable_value = 5;
  ModifyDirection direction = 6;
}

message TransformDefinitionEM {
  sint32 entity_id = 2;
  int32 new_entity_definition_id = 3;
}

message ResetDiceEM {
  int32 who = 1;
  repeated DiceType dice = 2;
}

message DamageEM {
  DamageType damage_type = 1;
  int32 value = 2;
  sint32 target_id = 3;
  int32 target_definition_id = 4;
  sint32 source_id = 5;
  int32 source_definition_id = 6;
  bool is_skill_main_damage = 7;
}

message ElementalReactionEM {
  ReactionType reaction_type = 1;
  sint32 character_id = 3;
  int32 character_definition_id = 4;
}

enum SkillType {
  SKILL_TYPE_TRIGGERED = 0;
  SKILL_TYPE_CHARACTER_PASSIVE = 1;
  SKILL_TYPE_NORMAL = 2;
  SKILL_TYPE_ELEMENTAL = 3;
  SKILL_TYPE_BURST = 4;
  SKILL_TYPE_TECHNIQUE = 5;
}

// 使用或触发了技能
message SkillUsedEM {
  sint32 caller_id = 1;
  int32 caller_definition_id = 2;
  int32 skill_definition_id = 3;
  SkillType skill_type = 4;
  int32 who = 5;
}

// 玩家的当前 IO 状态
enum PlayerStatus {
  PLAYER_STATUS_UNSPECIFIED = 0;
  PLAYER_STATUS_CHOOSING_ACTIVE = 1;
  PLAYER_STATUS_SWITCHING_HANDS = 2;
  PLAYER_STATUS_REROLLING = 3;
  PLAYER_STATUS_ACTING = 4;
  PLAYER_STATUS_SELECTING_CARDS = 5;
}

message PlayerStatusChangeEM {
  int32 who = 1;
  PlayerStatus status = 2;
}

message SwapCharacterPositionEM {
  int32 who = 1;
  sint32 character_0_id = 2;
  int32 character_0_definition_id = 3;
  sint32 character_1_id = 4;
  int32 character_1_definition_id = 5;
}

enum PlayerFlag {
  PLAYER_FLAG_UNSPECIFIED = 0;
  PLAYER_FLAG_DECLARED_END = 1;
  PLAYER_FLAG_LEGEND_USED = 2;
}

message SetPlayerFlagEM {
  int32 who = 1;
  PlayerFlag flag_name = 2;
  bool flag_value = 3;
}
